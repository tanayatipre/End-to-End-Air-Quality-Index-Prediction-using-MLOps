name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**' 
  workflow_dispatch:
    inputs:
      full_train:
        description: 'Run full ML pipeline training and deploy new model'
        required: true 
        type: boolean
        default: false

permissions:
  id-token: write 
  contents: read  

env: 
  MLFLOW_TRACKING_URI: https://dagshub.com/tanayatipre8/End-to-End-Machine-Learning-Project-with-MLFlow.mlflow 
  MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }} 
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }} 

jobs:
  continuous-integration:
    name: Lint, Test, and Cache Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9' 

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
            
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Lint code
        run: echo "Linting repository (e.g., pylint, flake8)" 

      - name: Run unit tests
        run: echo "Running unit tests (e.g., pytest)" 


  full-model-training:
    name: Full ML Pipeline Training
    runs-on: ubuntu-latest
    needs: continuous-integration 
    if: github.event_name == 'workflow_dispatch' && fromJson(github.event.inputs.full_train) == true

    outputs: 
      run_id: ${{ steps.run_pipeline.outputs.run_id }} 

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-
            
      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install MLProject as editable package
        run: pip install -e .

      - name: Run Full ML Pipeline Training
        id: run_pipeline 
        run: |
          python main.py
          LATEST_RUN_ID=$(mlflow runs list --max-results 1 --output-as json | jq -r '.[0].run_id')
          echo "Captured latest MLflow Run ID: $LATEST_RUN_ID"
          echo "run_id=$LATEST_RUN_ID" >> "$GITHUB_OUTPUT" 

  build-and-push-ecr-image:
    name: Build & Push Docker Image
    needs: full-model-training 
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # --- FIX: Mask Docker Password ---
      - name: Login to Amazon ECR
        id: login-ecr # This ID is fine here
        run: |
          echo "${{ secrets.AWS_SECRET_ACCESS_KEY }}" | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          echo "::set-output name=registry::${{ steps.login-ecr.outputs.registry }}" # This output is needed by subsequent steps
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }} # Assuming you have this secret
          AWS_REGION: ${{ secrets.AWS_REGION }}


      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --build-arg MLFLOW_RUN_ID="${{ needs.full-model-training.outputs.run_id }}" \
            --build-arg GITHUB_REPOSITORY="${{ github.repository }}" \
            --build-arg MLFLOW_TRACKING_USERNAME="${{ env.MLFLOW_TRACKING_USERNAME }}" \
            --build-arg MLFLOW_TRACKING_PASSWORD="${{ env.MLFLOW_TRACKING_PASSWORD }}" \
            --build-arg MLFLOW_TRACKING_URI="${{ env.MLFLOW_TRACKING_URI }}" .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" 

  continuous-deployment:
    name: Deploy to Self-Hosted Runner
    needs: build-and-push-ecr-image 
    runs-on: self-hosted 
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      # --- REVISED FIX: Mask Docker Password for Self-Hosted Runner ---
      - name: Login to Amazon ECR (Self-Hosted)
        id: deploy-login-ecr # <--- CHANGED ID: From 'login-ecr-self-hosted' to 'deploy-login-ecr'
        run: |
          # Get ECR login password using AWS CLI and pipe it to docker login --password-stdin
          AWS_ACCOUNT_ID="${{ secrets.AWS_ACCOUNT_ID }}" # Assuming you have this secret
          AWS_REGION="${{ secrets.AWS_REGION }}"
          ECR_REGISTRY="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
          
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
      
      - name: Pull latest image
        run: |
          docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Stop and remove previous container (if running)
        run: |
          docker ps -a --filter "name=mlproj" --format "{{.ID}}" | xargs -r docker stop || true
          docker ps -a --filter "name=mlproj" --format "{{.ID}}" | xargs -r docker rm -fv || true

      - name: Run New Docker Image to serve users
        run: |
          docker run -d -p 8080:8080 --name=mlproj \
            -e 'MLFLOW_TRACKING_URI=${{ env.MLFLOW_TRACKING_URI }}' \
            -e 'MLFLOW_TRACKING_USERNAME=${{ env.MLFLOW_TRACKING_USERNAME }}' \
            -e 'MLFLOW_TRACKING_PASSWORD=${{ env.MLFLOW_TRACKING_PASSWORD }}' \
            -e 'MLFLOW_RUN_ID=${{ needs.full-model-training.outputs.run_id }}' \
            -e 'ML_ARTIFACTS_DIR=/app/artifacts/downloaded_model' \ 
            ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest

      - name: Clean previous images and containers (optional, careful with this)
        run: |
          docker system prune -f || true
